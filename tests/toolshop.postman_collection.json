{
  "info": {
    "name": "Toolshop - 3 APIs (Data-Driven, Contract + Quality Checks)",
    "_postman_id": "d500ffa2-b752-40f5-8f28-d484b5ac7456",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Data-driven tests for login, product search, and get-by-id. Includes contract tests (must pass) and optional quality checks (controlled by env var enable_quality_checks)."
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://c3c8c76a2d93.ngrok-free.app"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "const auth = pm.environment.get('auth_header');",
          "if (auth) { pm.request.headers.upsert({ key: 'Authorization', value: auth }); }"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Users - Login",
      "item": [
        {
          "name": "POST /users/login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"{{email}}\", \"password\": \"{{password}}\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "login"
              ]
            },
            "description": "Login to obtain access token. CSV: email,password,expected_status,expect_token"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const D = pm.iterationData && typeof pm.iterationData.get==='function' ? pm.iterationData : null;",
                  "if (!pm.environment.get('baseUrl') && !pm.variables.get('baseUrl')) { pm.variables.set('baseUrl','http://localhost:8091'); }",
                  "if (D) { pm.variables.set('email', D.get('email')); pm.variables.set('password', D.get('password')); pm.variables.set('expected_status', D.get('expected_status')); pm.variables.set('expect_token', D.get('expect_token')); }"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonBody = pm.response.json();",
                  "const hasData = pm.iterationData && typeof pm.iterationData.get==='function';",
                  "const expected = hasData && pm.iterationData.get('expected_status') ? parseInt(pm.iterationData.get('expected_status')) : 200;",
                  "const expectToken = hasData ? (String(pm.iterationData.get('expect_token')||'true').toLowerCase()==='true') : true;",
                  "pm.test('Status matches expected', ()=> pm.response.to.have.status(expected));",
                  "pm.test('Response time < 800ms', ()=> pm.expect(pm.response.responseTime).to.be.below(800));",
                  "pm.test('Response is JSON', ()=> pm.response.to.be.json);",
                  "if (pm.response.code===200 && expectToken) {",
                  "  const LoginSuccessSchema = { type:'object', required:['access_token','token_type','expires_in'], properties:{ access_token:{type:'string',minLength:1}, token_type:{type:'string',enum:['Bearer']}, expires_in:{type:'integer',minimum:1} }, additionalProperties:true };",
                  "  pm.test('Schema OK (LoginSuccess)', ()=> pm.expect(jsonBody).to.have.jsonSchema(LoginSuccessSchema));",
                  "  pm.environment.set('auth_header', `${jsonBody.token_type} ${jsonBody.access_token}`);",
                  "} else { pm.test('No token expected for this case', ()=> pm.expect(true).to.be.true); }"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products - Search",
      "item": [
        {
          "name": "GET /products/search",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/products/search?q={{q}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "search"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "{{q}}"
                }
              ]
            },
            "description": "Search products by name. CSV: q, expect_empty (true|false|'')."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const D = pm.iterationData && typeof pm.iterationData.get==='function' ? pm.iterationData : null;",
                  "if (!pm.environment.get('baseUrl') && !pm.variables.get('baseUrl')) { pm.variables.set('baseUrl','http://localhost:8091'); }",
                  "if (D) { pm.variables.set('q', D.get('q')); pm.variables.set('expect_empty', D.get('expect_empty')); }"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const body = pm.response.json();",
                  "if (pm.info.iteration > 0) { pm.test('Perf: response time < 800ms', ()=> pm.expect(pm.response.responseTime).to.be.below(800)); }",
                  "pm.test('Status is 200', ()=> pm.response.to.have.status(200));",
                  "pm.test('Response is JSON', ()=> pm.response.to.be.json);",
                  "const ContractSchema = { type:'object', required:['current_page','data','per_page','total'], properties:{ current_page:{type:'integer'}, data:{ type:'array', items:{ type:'object', required:['id','name','price'], properties:{ id:{type:'integer'}, name:{type:'string'}, price:{type:'number'}, description:{type:'string'}, is_location_offer:{ anyOf:[{type:'boolean'},{type:'integer'},{type:'number'}] }, is_rental:{ anyOf:[{type:'boolean'},{type:'integer'},{type:'number'}] }, brand:{ type:['object','null'], properties:{ id:{type:'integer'}, name:{type:'string'}, slug:{type:'string'} }, additionalProperties:true }, category:{ type:['object','null'], properties:{ id:{type:'integer'}, parent_id:{type:'integer'}, name:{type:'string'}, slug:{type:'string'} }, additionalProperties:true }, product_image:{ type:['object','null'], properties:{ by_name:{type:'string'}, by_url:{type:'string'}, source_name:{type:'string'}, source_url:{type:'string'}, file_name:{type:'string'}, title:{type:'string'}, created_at:{type:'string'}, id:{type:'integer'} }, additionalProperties:true } }, additionalProperties:true } }, next_page_url:{ anyOf:[{type:'integer'},{type:'number'},{type:'string'},{type:'null'}] }, path:{ anyOf:[{type:'integer'},{type:'number'},{type:'string'},{type:'null'}] }, per_page:{ type:'integer' }, prev_page_url:{ anyOf:[{type:'integer'},{type:'number'},{type:'string'},{type:'null'}] }, to:{ anyOf:[{type:'integer'},{type:'number'},{type:'null'}] }, total:{ type:'integer' } }, additionalProperties:true };",
                  "pm.test('Contract: schema OK (search)', ()=> pm.expect(body).to.have.jsonSchema(ContractSchema));",
                  "pm.test('Has data array', ()=> pm.expect(body).to.have.property('data').that.is.an('array'));",
                  "const expectEmpty = String(pm.iterationData.get('expect_empty') || '').toLowerCase();",
                  "pm.test('Empty/non-empty as expected', ()=> { const len = (body.data||[]).length; if (expectEmpty==='true') pm.expect(len).to.eql(0); else if (expectEmpty==='false') pm.expect(len).to.be.greaterThan(0); else pm.expect(len).to.be.at.least(0); });",
                  "const enableQC = String(pm.environment.get('enable_quality_checks')||'false').toLowerCase()==='true';",
                  "if (enableQC) { let missing=[]; (body.data||[]).forEach((p,i)=>{ if (!p.brand) missing.push(`data[${i}].brand missing`); if (!p.category) missing.push(`data[${i}].category missing`); if (!(p.product_image && p.product_image.created_at)) missing.push(`data[${i}].product_image.created_at missing`); }); pm.test('Quality: brand/category/image.created_at present for all items', ()=> pm.expect(missing, missing.join('\\n')).to.eql([])); } else { console.log('Quality checks skipped. Set env enable_quality_checks=true to enable.'); }"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products - Get by Id",
      "item": [
        {
          "name": "GET /products/{productId}",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            },
            "description": "Get product by ID. CSV: productId, expected_status."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const D = pm.iterationData && typeof pm.iterationData.get==='function' ? pm.iterationData : null;",
                  "if (!pm.environment.get('baseUrl') && !pm.variables.get('baseUrl')) { pm.variables.set('baseUrl','http://localhost:8091'); }",
                  "if (D) { pm.variables.set('productId', D.get('productId')); pm.variables.set('expected_status', D.get('expected_status')); }"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const hasData = pm.iterationData && typeof pm.iterationData.get==='function';",
                  "const expected = hasData && pm.iterationData.get('expected_status') ? parseInt(pm.iterationData.get('expected_status')) : 200;",
                  "if (pm.info.iteration > 0) { pm.test('Perf: response time < 800ms', ()=> pm.expect(pm.response.responseTime).to.be.below(800)); }",
                  "pm.test('Status matches expected', ()=> pm.response.to.have.status(expected));",
                  "if (pm.response.code===200) { const body = pm.response.json(); const ProductByIdSchema = { type:'object', required:['id','name','slug'], properties:{ id:{type:'integer'}, name:{type:'string'}, slug:{type:'string'} }, additionalProperties:true }; pm.test('Schema OK (ProductById)', ()=> pm.expect(body).to.have.jsonSchema(ProductByIdSchema)); const pidVar = pm.variables.get('productId'); const pid = Number(pidVar); pm.test('ID matches path param (when numeric)', ()=> { if (!Number.isNaN(pid)) pm.expect(body.id).to.eql(pid); else pm.expect(true).to.be.true; }); }"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}