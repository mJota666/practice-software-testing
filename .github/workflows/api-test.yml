name: API Tests (Build, Seed, Run on 8091)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  e2e-api-tests:
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    env:
      BASE_URL: http://localhost:8091
      SUT_REPO: https://github.com/testsmith-io/practice-software-testing.git
      SUT_DIR: sut/practice-software-testing/sprint5-with-bugs
      DISABLE_LOGGING: "false"

    steps:
      - name: Checkout tests repo (this repo)
        uses: actions/checkout@v4

      - name: Setup Node.js (for Newman & helpers)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install CLI tools (Newman, htmlextra, wait-on)
        run: |
          npm i -g newman newman-reporter-htmlextra wait-on

      - name: Create reports folder
        run: mkdir -p reports

      # ==== SUT ====
      - name: Clone Toolshop SUT
        run: |
          mkdir -p sut
          git clone --depth=1 "$SUT_REPO" sut/practice-software-testing
          ls -lah sut/practice-software-testing

      - name: Prepare docker compose (SUT)
        working-directory: ${{ env.SUT_DIR }}
        shell: bash
        run: |
          cp docker-compose.example.yml docker-compose.yml 2>/dev/null || true
          echo "=== Listing SUT dir ==="; ls -lah
          echo "=== .env (if present) ==="
          test -f .env && sed -n '1,120p' .env || echo "WARNING: .env not found"

      # OVERRIDE: share code with web so both see vendor/
      - name: Create docker-compose.override.yml (share code with web)
        working-directory: ${{ env.SUT_DIR }}
        run: |
          cat > docker-compose.override.yml <<'YML'
          services:
            web:
              volumes:
                - ./${SPRINT}/API:/var/www:cached
          YML
          echo "=== docker-compose.override.yml ==="
          cat docker-compose.override.yml

      - name: docker compose up (build & start)
        working-directory: ${{ env.SUT_DIR }}
        run: |
          docker compose up -d --build
          docker compose ps

      # Composer install (install unzip inside composer container) + retry
      - name: Composer install (populate vendor)
        working-directory: ${{ env.SUT_DIR }}
        env:
          COMPOSER_ALLOW_SUPERUSER: "1"
          COMPOSER_NO_INTERACTION: "1"
          COMPOSER_MAX_PARALLEL_HTTP: "5"
        run: |
          docker compose run --rm composer sh -c '
            set -e
            if command -v apt-get >/dev/null 2>&1; then
              apt-get update && apt-get install -y --no-install-recommends unzip ca-certificates && rm -rf /var/lib/apt/lists/*
            elif command -v apk >/dev/null 2>&1; then
              apk add --no-cache unzip ca-certificates
            fi

            run_install() {
              composer install --no-dev --optimize-autoloader --prefer-dist --no-progress --ignore-platform-req=ext-ffi
            }

            if ! run_install; then
              echo "Composer install failed; retrying once..." >&2
              rm -rf vendor/composer/* || true
              run_install
            fi

            chown -R www-data:www-data /var/www
            chmod -R 775 /var/www
          '

      - name: Verify vendor exists
        working-directory: ${{ env.SUT_DIR }}
        run: |
          docker compose exec -T laravel-api sh -c 'if [ -f vendor/autoload.php ]; then echo "vendor OK in laravel-api"; else echo "NO vendor in laravel-api"; ls -lah vendor || true; exit 2; fi'
          docker compose exec -T web        sh -c 'if [ -f vendor/autoload.php ]; then echo "vendor OK in web";        else echo "NO vendor in web";        ls -lah vendor || true; exit 2; fi'

      - name: Seed database (migrate:fresh --seed) with retry
        working-directory: ${{ env.SUT_DIR }}
        shell: bash
        run: |
          set -e
          for i in {1..10}; do
            echo "Seeding attempt $i..."
            if docker compose exec -T laravel-api sh -c 'php artisan migrate:fresh --seed'; then
              echo "Seed OK"
              break
            fi
            echo "Seed failed; wait 6s & retry..."
            sleep 6
          done

      - name: Wait for SUT (web:8091) to be ready
        shell: bash
        run: |
          set -e
          npx wait-on tcp:8091
          for url in "$BASE_URL/products/1" "$BASE_URL/"; do
            echo "Probing $url ..."
            if npx wait-on --httpTimeout 300000 --interval 1000 "$url"; then
              echo "SUT HTTP is up at: $url"
              exit 0
            fi
          done
          echo "ERROR: SUT did not become ready on expected endpoints." >&2
          exit 1

      - name: Sanity check endpoints
        run: |
          curl -i ${BASE_URL}/products/1 | tee ${{ github.workspace }}/reports/curl-products-1.txt

      # ==== Newman env (share token across runs) ====
      - name: Ensure Postman environment (for token sharing)
        run: |
          mkdir -p tests
          cat > tests/environment.json <<'JSON'
          {
            "id": "ci-env",
            "name": "CI Environment",
            "values": [
              { "key": "baseUrl", "value": "", "enabled": true },
              { "key": "authToken", "value": "", "enabled": true }
            ]
          }
          JSON
          node -e "let f=require('./tests/environment.json'); f.values.find(v=>v.key==='baseUrl').value=process.env.BASE_URL; require('fs').writeFileSync('./tests/environment.json', JSON.stringify(f,null,2));"
          cat tests/environment.json

      # ==== Newman: Login trước (ghi token), rồi các API khác ====
      - name: Run Postman - Login (export token)
        continue-on-error: false
        run: |
          newman run tests/toolshop.postman_collection.json \
            --folder "Users - Login" \
            --iteration-data tests/login.csv \
            --environment tests/environment.json \
            --export-environment tests/environment.json \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export reports/test-report-login.html

      - name: Run Postman - Product Search
        continue-on-error: true
        run: |
          newman run tests/toolshop.postman_collection.json \
            --folder "Products - Search" \
            --iteration-data tests/product_search.csv \
            --environment tests/environment.json \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export reports/test-report-search.html

      - name: Run Postman - Product By ID
        continue-on-error: true
        run: |
          newman run tests/toolshop.postman_collection.json \
            --folder "Products - Get by Id" \
            --iteration-data tests/product_by_id.csv \
            --environment tests/environment.json \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export reports/test-report-getid.html

      # ==== Logs & teardown ====
      - name: Docker ps
        if: ${{ always() }}
        working-directory: ${{ env.SUT_DIR }}
        run: docker compose ps

      - name: Docker logs (for debugging)
        if: ${{ always() }}
        working-directory: ${{ env.SUT_DIR }}
        env:
          LOG_OUT: ${{ github.workspace }}/reports/docker-logs.txt
        run: |
          mkdir -p "${LOG_OUT%/*}"
          docker compose logs --no-color > "$LOG_OUT" || true
          echo "Saved docker logs to $LOG_OUT"

      - name: Stop SUT
        if: ${{ always() }}
        working-directory: ${{ env.SUT_DIR }}
        run: docker compose down -v

      # ==== Artifacts & GitHub Pages ====
      - name: Upload Test Reports (Artifacts)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: api-test-reports
          path: |
            reports/*.html
            reports/*.txt
          if-no-files-found: warn

      - name: Configure GitHub Pages
        if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: actions/configure-pages@v5

      - name: Prepare Pages content
        if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        shell: bash
        run: |
          set -e
          mkdir -p public
          shopt -s nullglob
          cp -r reports/*.html public/ 2>/dev/null || true
          {
            echo '<html><head><meta charset="utf-8"><title>API Test Reports</title></head><body><h1>API Test Reports</h1><ul>'
            for f in public/*.html; do
              base="$(basename "$f")"
              [[ "$base" == "index.html" ]] || echo "<li><a href=\"$base\">$base</a></li>"
            done
            echo '</ul></body></html>'
          } > public/index.html
          ls -lah public || true

      - name: Upload Pages artifact
        if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        id: deployment
        uses: actions/deploy-pages@v4
